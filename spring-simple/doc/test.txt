# 개발자 테스트

	테스팅의 개념
		
		1. 일반 개념
			- 작업이 끝난 후 , 처음에 요구된 것과 현재 상태의 차이를 발견하기 위해 수행하는 행동
			
		2. 전통적인 테스트 개념과 현재의 테스트 개념
			
			- 소프트웨어 테스팅
				==> 응용 프로그램 또는 구성요소를 포함한 스템의 동작과 성능, 안정성이 
					사용자가 요구하는 수준을 만족하는지 확인하기 위해 결함을 발견하는 메커니즘
					
			- 전통적인 테스트 개념
				==> 응용 프로그램 또는 시스템의 정상 작동 여부 확인
				
			- 현대적인 테스트 개념
				==> 사용자의 기대수준과 요구사항에 맞게 구현되고 동작하는지를 확인하고,
					이를 통해 결함을 발견하여, 
					최종적으로 결함 데이터를 근간으로
					개발 프로젝트의 리스크 정보를 정량적 수치로 
					의사결정권자(프로젝트 관리자, 클라이언트,...)에게 전달하는 것
					
			- 결함 예방 활동
				==> 개발 프로젝트 초기에 개발 산출물을 테스트 관점에서 리뷰하고,
					테스트 케이스를 만드는 과정에서 결함을 발견하는 작업(결함 예방 활동)도 테스팅 활동의 중요한 부분으로 인식되고 있다.
					
	테스트의 필요성
		1. 소프트웨어 시스템은 비즈니스 어플리케이션에서 소비자 제품에 이르기까지
			생활의 많은 부분에서 사용되고 있으며, 그 비중은 계속해서 증가하고 있다.
		2. 소프트웨어가 올바르게 작동하지 않는 경우 다양한 문제가 발생하며,
			이로 인한 피해는 금전적인 손실, 시간 낭비, 비즈니스의 이미지 손상, 
			그리고 부상이나 사망에 이르기까지 다양하고 심각하다.
		3. 테스팅은 이러한 소프트웨어 시스템의 문제를 최소화하기 위해 반드시 필요하다.
		
		
*****
소프트웨어 테스트 기법의 종류
	# 소프트웨어 내부 구조 참조 여부에 따른 분류
		
		1. 블랙박스 테스트
			==> 테스트 대상의 내부구조(코드)를 참조하지 않고 테스트 베이시스, 그리고
				개발자와 테스터, 사용자들의 경험을 바탕으로 
				기능적 혹은 비기능적 테스트 케이스를 도출하고 선택하는 방법
				
		2. 화이트박스 테스트
			==> 컴포넌트(단위) 또는 소프트웨어(시스템)의 구조(코드)를 중심으로
				테스트 케이스를 도출하는 방법
				
			